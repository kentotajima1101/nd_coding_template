@charset "UTF-8";
$screen-pc-min: ($screen-tb + 1) !default;
$screen-tb-min: ($screen-sp + 1) !default;

$spacer:(
  mt:margin-top,
  mr:margin-right,
  mb:margin-bottom,
  ml:margin-left,
  pt:padding-top,
  pr:padding-right,
  pb:padding-bottom,
  pl:padding-left,
);
$align: left, right, center;

// クリアフィックスクラス
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

//余白クラス作成
@mixin spaceloop($sufix: "") {
  $i: 0;
  @while $i <= 200 {
    @each $class, $style in $spacer {
      .#{$class}#{$i}#{$sufix} {
        #{$style}: #{$i}px !important;
      }
    }
    @if $i >= 20 {
      $i: $i + 5;
    }
    @else {
      $i: $i + 1;
    }
  }
}

// 行揃え指定クラス作成
@mixin textalign($sufix: "") {
  @each $value in $align {
    .#{$value}-text#{$sufix} {
      text-align: #{$value} !important;
    }
  }
}

// フォントサイズクラスの生成
@mixin fontsize($sufix: "") {
  @for $i from 8 through 40 {
    .f#{$i}px#{$sufix} {
      font-size: #{$i}px !important;
    }
  }
}

// フォントウェイトクラスの生成
@mixin fontweight {
  @for $i from 1 through 9 {
    .fw#{$i * 100} {
      font-weight: #{$i * 100} !important;
    }
  }
}

// グラデーション生成
@mixin gradient($start-color, $end-color, $orientation)
{
  background: $start-color;
  @if $orientation == vertical
  {
    // 線形: 縦
    background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
  }
  @else if $orientation == horizontal
  {
    // 線形: 横
    background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
  @else
  {
    // 円形
    background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
}

// リンクテキストの下線切り替え
@mixin link() {
  @if $link-underline {
    text-decoration: underline;
    &:hover {
      text-decoration: none;
    }
  }
  @else {
    text-decoration: none;
    &:hover {
      text-decoration: underline;
    }
  }
}

// lineheightクラスの生成
@mixin lineheight($sufix: "") {
  $i: 10;
  @while $i <= 30 {
    .lh#{$i}#{$sufix} {
      line-height: #{$i * 0.1} !important;
    }
    $i: $i + 1;
  }
}

// letterspacingクラスの生成
@mixin letterspacing($sufix: "") {
  $i: 0;
  @while $i <= 100 {
    .ls#{$i}#{$sufix} {
      letter-spacing: #{$i * 0.001}em !important;
    }
    $i: $i + 1;
  }
}

//flex関係
@mixin f-direction($value: row) {
  flex-direction: $value;
}

@mixin f-wrap($value: wrap) {
  flex-wrap: $value;
}

@mixin j-content($value: flex-start) {
  justify-content: $value;
}

@mixin a-items($value: stretch) {
  align-items: $value;
}

@mixin flex($f-direction: row, $f-wrap: wrap, $j-content: flex-start, $a-items: stretch) {
  @include f-direction($f-direction);
  @include f-wrap($f-wrap);
  @include j-content($j-content);
  @include a-items($a-items);
  display: flex;
}


$flex-direction: (
  fd--row: row,
  fd--column: column
);
$flex-wrap: (
  fw--nowrap: nowrap,
  fw--wrap: wrap
);
$justify-content: (
  jc--start: flex-start,
  jc--end: flex-end,
  jc--center: center,
  jc--between: space-between,
  jc--around: space-around,
  jc--evenly: space-evenly
);
$align-items: (
  ai--start: flex-start,
  ai--end: flex-end,
  ai--center: center,
);

// 余白クラスの生成
@include spaceloop();

// 行揃え指定クラス
@include textalign();

// フォントサイズクラス作成
@include fontsize();

// lineheightのクラス
@include lineheight();

// letterspacingのクラス
@include letterspacing();

// font-weightのクラス
@include fontweight();

// クリアフィックス
.clearfix {
  @include clearfix;
}

// ポジションクラス
.absolute {
  position: absolute !important;
}
.relative {
  position: relative !important;
}
.static {
  position: static !important;
}

// pタグ同士の間の余白用クラス
.mt1em {
  margin-top: 1em;
}
.mb1em {
  margin-bottom: 1em;
}

// 画像用幅設定クラス
.mw100 {
  max-width: 100%;
  height: auto;
}
.w100 {
  width: 100% !important;
}

// 画像のフェード用クラス
.fade {
  transition: opacity 0.2s;
  opacity: 1;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  &:hover {
    opacity: 0.7;
  }
}

// フロートクラス
.left-box{
  float: left !important;
}
.right-box{
  float: right !important;
}
.center-box{
  margin-left: auto !important;
  margin-right: auto !important;
}

//フロートクラス（forSp)
.left-sp {
  float: left !important;
}

.right-sp {
  float: right !important;
}

// フォント太さクラス
.normal {
  font-weight: normal;
}
.bold {
  font-weight: bold;
}

  @media only screen and (max-width: $screen-tb) {
    // 行揃え指定クラス
    @include textalign(-tb);

    // タブレット用余白クラスの生成
    @include spaceloop(-tb);

    // タブレット用フォントサイズクラスの生成
    @include fontsize(-tb);

    // タブレット用lineheightのクラス
    @include lineheight(-tb);

    // タブレット用letterspacingのクラス
    @include letterspacing(-tb);
  }

  @media only screen and (max-width: $screen-sp) {
    // 行揃え指定クラス
    @include textalign(-sp);

    // スマホ用余白クラスの生成
    @include spaceloop(-sp);

    // スマホ用フォントサイズクラスの生成
    @include fontsize(-sp);

    // スマホ用lineheightのクラス
    @include lineheight(-sp);

    // スマホ用letterspacingのクラス
    @include letterspacing(-sp);
  }

  // デバイスごとのディスプレイ指定クラス
  .pc {
    @media only screen and (max-width: $screen-tb) {
        display: none !important;
    }
  }
  .pctb {
    @media only screen and (max-width: $screen-sp) {
        display: none !important;
    }
  }
  .tb {
    @media only screen and (min-width: $screen-pc-min) {
      display: none !important;
    }
  }
  .sp {
    @media only screen and (min-width: $screen-tb-min) {
      display: none !important;
    }
  }

//フレックス
.flex {
  @include flex;
}
@each $class, $value in $flex-direction {
  .#{$class} {
    @include f-direction($value);
  }
}
@each $class, $value in $flex-wrap {
  .#{$class} {
    @include f-wrap($value);
  }
}
@each $class, $value in $justify-content {
  .#{$class} {
    @include j-content($value);
  }
}
@each $class, $value in $align-items {
  .#{$class} {
    @include a-items($value);
  }
}
  @media only screen and (max-width: $screen-tb) {
    @each $class, $value in $flex-direction {
      .#{$class}-tb {
        @include f-direction($value);
      }
    }
    @each $class, $value in $flex-wrap {
      .#{$class}-tb {
        @include f-wrap($value);
      }
    }
    @each $class, $value in $justify-content {
      .#{$class}-tb {
        @include j-content($value);
      }
    }
    @each $class, $value in $align-items {
      .#{$class}-tb {
        @include a-items($value);
      }
    }
  }
  @media only screen and (max-width: $screen-sp) {
    @each $class, $value in $flex-direction {
      .#{$class}-sp {
        @include f-direction($value);
      }
    }
    @each $class, $value in $flex-wrap {
      .#{$class}-sp {
        @include f-wrap($value);
      }
    }
    @each $class, $value in $justify-content {
      .#{$class}-sp {
        @include j-content($value);
      }
    }
    @each $class, $value in $align-items {
      .#{$class}-sp {
        @include a-items($value);
      }
    }
  }


